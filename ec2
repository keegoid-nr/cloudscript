#!/bin/bash

SCRIPT_HEADER=(
  "# -----------------------------------------------------"
  "# CloudScript                                          "
  "# Quickly do cloud stuff without leaving the terminal. "
  "#                                                      "
  "# Author : Keegan Mullaney                             "
  "# Company: New Relic                                   "
  "# Email  : kmullaney@newrelic.com                      "
  "# Website: github.com/keegoid-nr/cloudscript           "
  "# License: MIT                                         "
  "#                                                      "
  "# debug  : export CS_DEBUG=1                           "
  "# -----------------------------------------------------"
)

# --------------------------  LIBRARIES

lib_has() {
  type "$1" >/dev/null 2>&1
}

lib_echo() {
  echo
  echo "~~~ ${1} ~~~"
  echo
}

# output message with encoded characters
# $1 -> string
lib_msg() {
  echo -e "$1"
}

# --------------------------  SETUP PARAMETERS

[ -z "$CS_DEBUG" ] && CS_DEBUG=0
SSH_CONFIG="$HOME/.ssh/config"

# --------------------------- HELPER FUNCTIONS

getPublicDns() {
  lib_msg "Getting public DNS name for $1"
  aws ec2 describe-instances --instance-ids "$1" | jq -r '.Reservations[].Instances[].PublicDnsName'
}

updateSSH() {
  local dns
  lib_msg "Checking if instance $1 is running"
  aws ec2 wait instance-running --instance-ids "$1"
  lib_msg "Getting public DNS name"
  dns="$(getPublicDns "$1")"
  lib_msg "Enter a \"Host\" to update from $SSH_CONFIG"
  echo
  cat ~/.ssh/config
  echo
  read -erp "   : " host
  if grep "$host" "$SSH_CONFIG"; then
    sed -e "/$host/,//  s/Hostname.*/Hostname $dns/" "$SSH_CONFIG"
  fi
}

ec2_exit() {
  echo >&2 "Please install $1 before running this script."
  exit 1
}

# --------------------------- FUNCTIONS

status() {
  lib_echo "Status"
  aws ec2 describe-instance-status --instance-ids "$1"
}

start() {
  lib_echo "Start"
  aws ec2 start-instances --instance-ids "$1"
}

stop() {
  lib_echo "Stop"
  aws ec2 stop-instances --instance-ids "$1"
}

restart() {
  lib_echo "Restart"
  aws ec2 reboot-instances --instance-ids "$1"
}

ids() {
  lib_echo "Ids"
  lib_msg "Getting EC2 names and instanceIds"
  aws ec2 describe-instances | jq -r '.Reservations[].Instances[] | (.Tags[]? | select(.Key=="Name")), .InstanceId'
}

dns() {
  lib_echo "DNS"
  updateSSH "$1"
}

# --------------------------- MAIN

# print header
ec2_print() {
  for line in "${SCRIPT_HEADER[@]}"; do
    echo "$line"
  done
}

# display message before exit
ec2_thanks() {
  if lib_has figlet; then
    lib_msg "Thanks for using CloudScript!" | figlet -f small
  else
    lib_msg "Thanks for using CloudScript!"
  fi
  lib_msg "Made with <3 by Keegan Mullaney, a Senior Technical Support Engineer at New Relic."
}

# execute main script function to collect Kubernetes info
ec2_go() {
  if ! lib_has aws; then ec2_exit "aws cli v2"; fi
  if ! lib_has jq; then ec2_exit "jq"; fi

  if $CS_DEBUG -eq 1; then
    if ! lib_has abc; then ec2_exit "abc cli"; fi
  fi

  case "$1" in
  'start')
    start "$2"
    ;;
  'stop')
    stop "$2"
    ;;
  'restart')
    restart "$2"
    ;;
  'status')
    status "$2"
    ;;
  'ids')
    getInstanceIds
    ;;
  *)
    echo
    echo "Usage: $0 { start <instanceId> | stop <instanceId> | restart <instanceId> | status <instanceId> | dns <instanceId> | ids }"
    echo
    exit 1
    ;;
  esac
}

# unset functions to free up memmory
ec2_unset() {
  unset -f ec2_print ec2_go ec2_thanks
}

# --------------------------  MAIN

ec2_print
ec2_go "$@"
ec2_thanks
ec2_unset
exit 0
